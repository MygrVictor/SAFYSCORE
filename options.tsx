import { useEffect, useState } from "react";
import { config } from "./config";
import "./options.css";

const options = () => {
  const [url, setUrl] = useState<string | null>(null);
  const [whoisData, setWhoisData] = useState<any>(null);
  const [googleSafeBrowsingData, setGoogleSafeBrowsingData] = useState<any>(null);
  const [securityScore, setSecurityScore] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(false);

  useEffect(() => {
    const getCurrentTab = async () => {
      chrome.tabs.query({ active: true, currentWindow: true }, async (tabs) => {
        const tabUrl = tabs[0]?.url;

        if (tabUrl && isValidUrl(tabUrl)) {
          setUrl(tabUrl);
          setLoading(true);

          try {
            const whoisResponse = await fetchWhoisData(tabUrl);
            setWhoisData(whoisResponse);

            const safeBrowsingResponse = await fetchGoogleSafeBrowsing(tabUrl);
            setGoogleSafeBrowsingData(safeBrowsingResponse);

            const analysis = analyzeWhoisData(whoisResponse);
            setSecurityScore(analysis.score);
          } catch (error) {
            console.error("Erreur lors de la r√©cup√©ration des donn√©es", error);
          } finally {
            setLoading(false);
          }
        } else {
          console.error("URL invalide : ", tabUrl);
        }
      });
    };

    getCurrentTab();
  }, []);

  const isValidUrl = (url: string) => {
    try {
      new URL(url);
      return true;
    } catch (e) {
      return false;
    }
  };

  const fetchWhoisData = async (url: string) => {
    try {
      const domain = new URL(url).hostname;
      const response = await fetch(
        `https://www.whoisxmlapi.com/whoisserver/WhoisService?apiKey=${config.WHOIS_API_KEY}&domainName=${domain}&outputFormat=json`
      );

      if (!response.ok) {
        throw new Error("Erreur lors de la r√©cup√©ration des donn√©es Whois");
      }

      const data = await response.json();
      return data;
    } catch (error) {
      console.error("Erreur API WhoisXML :", error);
      return null;
    }
  };

  const fetchGoogleSafeBrowsing = async (url: string) => {
    try {
      const response = await fetch(
        `https://safebrowsing.googleapis.com/v4/threatMatches:find?key=${config.GOOGLE_SAFE_BROWSING_API_KEY}`,
        {
          method: "POST",
          body: JSON.stringify({
            client: {
              clientId: "yourClientID",
              clientVersion: "1.0",
            },
            threatInfo: {
              urlList: [url],
            },
          }),
        }
      );

      if (!response.ok) {
        throw new Error("Erreur lors de la r√©cup√©ration des donn√©es Google Safe Browsing");
      }

      const data = await response.json();
      return data;
    } catch (error) {
      console.error("Erreur API Safe Browsing :", error);
      return null;
    }
  };

  const analyzeWhoisData = (whoisData: any) => {
    if (!whoisData || !whoisData.WhoisRecord) {
      return { score: "D", explanation: "Impossible de r√©cup√©rer les infos Whois du site." };
    }

    const record = whoisData.WhoisRecord;
    const creationDate = record.createdDateNormalized;
    const isAnonymous = record.privacy || false;

    let score = "A";
    let explanation = "Le site semble fiable.";

    if (creationDate) {
      const year = new Date(creationDate).getFullYear();
      const currentYear = new Date().getFullYear();
      const age = currentYear - year;

      if (age < 1) {
        score = "C";
        explanation = "Le domaine est tr√®s r√©cent. Prudence recommand√©e.";
      } else if (age < 5) {
        score = "B";
        explanation = "Le domaine est relativement r√©cent.";
      }
    }

    if (isAnonymous) {
      score = "C";
      explanation += " Le propri√©taire du domaine utilise un service d‚Äôanonymisation.";
    }

    return { score, explanation };
  };

  const renderScoreExplanation = (score: string) => {
    const explanations = {
      "A": (
        <>
          <h2>Tr√®s S√ªr</h2>
          <p>
            Le site a une longue histoire avec une r√©putation bien √©tablie, ce qui
            renforce sa fiabilit√©. Il est associ√© √† un registrar de confiance et son
            propri√©taire n'utilise pas de services d'anonymisation, ce qui facilite la
            v√©rification de son identit√©. Cela indique un faible risque de fraude
            ou d'escroquerie.
          </p>
          <p>
            De plus, le site poss√®de une infrastructure s√©curis√©e, offrant une
            protection accrue pour les utilisateurs contre les attaques malveillantes.
            En raison de son anciennet√© et de la transparence de ses informations, ce
            site est jug√© tr√®s s√ªr.
          </p>
        </>
      ),
      "B": (
        <>
          <h2>Mod√©r√©ment S√ªr</h2>
          <p>
            Le domaine est relativement r√©cent, mais il est enregistr√© aupr√®s d'un
            registrar de confiance. Bien que le site ne pr√©sente pas de risques majeurs,
            sa jeunesse peut parfois poser des pr√©occupations. Il est important de
            rester vigilant, surtout s'il pr√©sente des caract√©ristiques suspectes ou
            manque de transparence.
          </p>
          <p>
            Les propri√©taires du site sont visibles, ce qui est un bon signe. Cependant,
            un site mod√©r√©ment s√ªr peut encore √™tre susceptible √† certaines vuln√©rabilit√©s,
            notamment si ses informations de s√©curit√© ne sont pas √† jour.
          </p>
        </>
      ),
      "C": (
        <>
          <h2>Moins S√ªr</h2>
          <p>
            Le site est relativement nouveau et utilise un service d'anonymisation pour
            masquer l'identit√© de son propri√©taire, ce qui peut compliquer la v√©rification
            de sa cr√©dibilit√©. Bien que ce ne soit pas n√©cessairement un signe de fraude,
            cela indique un niveau de risque plus √©lev√©.
          </p>
          <p>
            Les sites utilisant de tels services sont souvent associ√©s √† des activit√©s
            suspectes, comme des escroqueries en ligne ou des tentatives de phishing. Il
            est donc conseill√© de faire preuve de prudence lors de l'interaction avec ces
            sites.
          </p>
        </>
      ),
      "D": (
        <>
          <h2>Tr√®s Risqu√©</h2>
          <p>
            Ce site pr√©sente plusieurs indicateurs de risques, notamment sa jeunesse et
            le fait qu'il utilise des services d'anonymisation. Il est associ√© √† un domaine
            r√©cent, ce qui sugg√®re qu'il n'a pas encore eu le temps de b√¢tir une r√©putation
            solide.
          </p>
          <p>
            Les sites class√©s tr√®s risqu√©s ont souvent √©t√© cr√©√©s dans le but de mener des
            attaques malveillantes ou de voler des informations personnelles. Il est fortement
            recommand√© d'√©viter d'interagir avec de tels sites.
          </p>
        </>
      ),
    };

    return explanations[score] || <p>Impossible de d√©terminer la s√©curit√© du site.</p>;
  };

  return (
    <div className="detailed-info-container">
      <h1><strong>{url ? new URL(url).hostname : "URL invalide"}</strong></h1>
      {loading && <p>Chargement...</p>}

      {url && (
        <>
          {securityScore && (
            <div className="security-score-container">
              
              <div className="score-explanation">
                {renderScoreExplanation(securityScore)}
              </div>
            </div>
          )}

          {whoisData && whoisData.WhoisRecord && (
            <div className="whois-info">
              <h2>üîç Informations Whois</h2>
              <p><strong>üóìÔ∏è Cr√©√© le :</strong> {whoisData.WhoisRecord.createdDateNormalized || "Inconnu"}</p>
              <p><strong>üè¢ Registrar :</strong> {whoisData.WhoisRecord.registrarName || "Inconnu"}</p>
              <p><strong>üïµÔ∏è Anonymisation :</strong> {whoisData.WhoisRecord.privacy ? "Oui üî¥" : "Non üü¢"}</p>
            </div>
          )}

          {googleSafeBrowsingData && (
            <div className="safe-browsing-info">
              <h2>üõ°Ô∏è S√©curit√© Google Safe Browsing</h2>
              <p>{googleSafeBrowsingData.matches ? "Le site est class√© comme dangereux üö®" : "Le site semble s√ªr ‚úÖ"}</p>
            </div>
          )}

          <div className="separator"></div>

          <a href={`popup.html?url=${encodeURIComponent(url)}`} className="back-to-popup">
            Retour
          </a>
        </>
      )}
    </div>
  );
};

export default options;
